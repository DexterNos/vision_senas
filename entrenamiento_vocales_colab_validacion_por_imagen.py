# -*- coding: utf-8 -*-
"""Entrenamiento_vocales

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ftykMW_sstEcYWK_yL2yS1x3yBLle405
"""

from tensorflow import keras
from tensorflow.keras import layers
from keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
import cv2

datos_entrenamiento = "/content/drive/MyDrive/Colab Notebooks/Codigo proyecto/Entrenamiento vocales"
datos_validacion = "/content/drive/MyDrive/Colab Notebooks/Codigo proyecto/Validacion vocales"

prepros_entre = ImageDataGenerator(rescale=1./255,  rotation_range=20, zoom_range=0.3, horizontal_flip=True)
prepros_val = ImageDataGenerator(rescale=1./255 )

data_train = prepros_entre.flow_from_directory(datos_entrenamiento, 
                                               target_size=(200,200), 
                                               class_mode='categorical',
                                               batch_size=32)

data_val = prepros_val.flow_from_directory(datos_validacion,
                                           target_size=(200,200), 
                                               class_mode='categorical',
                                               batch_size=32)

inputs = keras.Input(shape = (200,200,3))
x = layers.Conv2D(filters=32, kernel_size=4, activation="relu")(inputs)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=128, kernel_size=2, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=128, kernel_size=2, activation="relu")(x)
x = layers.Flatten()(x)
x = layers.Dense(64,activation='relu')(x)
outputs = layers.Dense(5, activation="softmax")(x)
model = keras.Model(inputs=inputs, outputs=outputs)
model.summary()

model.compile(optimizer='adam',
      loss='categorical_crossentropy',
      metrics=['accuracy'])

model.fit(data_train, validation_data=data_val, epochs=10, batch_size=32)

score = model.evaluate(data_train, verbose = 2)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

import numpy as np

def prepare(filepath):
  IMG_SIZE = 200
  img_array = cv2.imread(filepath)
  img_array = cv2.cvtColor(img_array ,cv2.COLOR_BGR2RGB)
  new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
  return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)

prediction = model.predict([prepare("/content/drive/MyDrive/Colab Notebooks/Codigo proyecto/Validacion vocales/Letra_E/foto_5.jpg")])
x = np.argmax(prediction, axis = 1)
print(prediction)
print(x)

model.save('Modelo_vocales_colab.h5')
model.save_weights('Pesos_vocales_colab.h5')